const twilio = require('twilio');
const pool = require('./db');
require('dotenv').config();

const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

// üîπ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ SMS-–∫–æ–¥
async function sendVerification(phone) {
    try {
        const result = await client.verify.v2.services(process.env.TWILIO_VERIFY_SID)
            .verifications
            .create({ to: phone, channel: 'sms' });
        return result.status === 'pending';
    } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ SMS:", err.message);
        return false;
    }
}

// üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ SMS-–∫–æ–¥
async function checkCode(phone, code) {
    try {
        const result = await client.verify.v2.services(process.env.TWILIO_VERIFY_SID)
            .verificationChecks
            .create({ to: phone, code });

        return result.status === 'approved';
    } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–¥—É:", err.message);
        return false;
    }
}

// üîπ –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π)
async function addAdmin(username) {
    const defaultPassword = "1234"; // –∞–±–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π / —Ö–µ—à–æ–≤–∞–Ω–∏–π
    await pool.query(
        'INSERT INTO admins (username, password) VALUES ($1, $2) ON CONFLICT (username) DO NOTHING',
        [username, defaultPassword]
    );
    console.log(`‚úÖ –ê–¥–º—ñ–Ω ${username} –¥–æ–¥–∞–Ω–∏–π.`);
}

module.exports = {
    sendVerification,
    checkCode,
    addAdmin
};
